<?php

namespace App\Http\Controllers\Features\Koordinator;

use App\Http\Controllers\Controller;
use App\Models\SesiRuangan;
use App\Models\BeritaAcaraUjian;
use App\Models\JadwalUjian;
use App\Models\JadwalUjianSesiRuangan;
use App\Models\SesiRuanganSiswa;
use App\Models\Ruangan;
use App\Models\Guru;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use Carbon\Carbon;

class MonitoringController extends Controller
{
    /**
     * Display monitoring dashboard
     */
    public function index(Request $request)
    {
        // Get filter parameters
        $selectedDate = $request->get('date', Carbon::today()->format('Y-m-d'));
        $selectedStatus = $request->get('status', 'all');
        $selectedRuangan = $request->get('ruangan_id', 'all');

        // Build query for sessions
        $query = SesiRuangan::with(['ruangan', 'sesiRuanganSiswa.siswa', 'jadwalUjians'])
            ->whereHas('jadwalUjians', function ($q) use ($selectedDate) {
                $q->whereDate('tanggal', $selectedDate);
            });

        if ($selectedStatus !== 'all') {
            $query->where('status', $selectedStatus);
        }

        if ($selectedRuangan !== 'all') {
            $query->where('ruangan_id', $selectedRuangan);
        }

        $sessions = $query->orderBy('waktu_mulai')->get();
        $sessions->each->checkAutoStart();

        // Get monitoring statistics
        $stats = $this->getMonitoringStats($selectedDate);

        // Get available ruangan for filter
        $availableRuangan = Ruangan::where('status', 'aktif')
            ->orderBy('nama_ruangan')
            ->get();

        // Process sessions with enhanced styling and progress data
        $activeSessions = $sessions->map(function ($session) {
            // Add style properties
            $session->status_border_class = match ($session->status) {
                'berlangsung' => 'border-green-500',
                'belum_mulai' => 'border-yellow-500',
                'selesai' => 'border-gray-500',
                'dibatalkan' => 'border-red-500',
                default => 'border-gray-300'
            };

            $session->status_badge_class = match ($session->status) {
                'berlangsung' => 'bg-green-100 text-green-800',
                'belum_mulai' => 'bg-yellow-100 text-yellow-800',
                'selesai' => 'bg-gray-100 text-gray-800',
                'dibatalkan' => 'bg-red-100 text-red-800',
                default => 'bg-gray-100 text-gray-800'
            };

            $session->status_label = match ($session->status) {
                'berlangsung' => 'Berlangsung',
                'belum_mulai' => 'Belum Mulai',
                'selesai' => 'Selesai',
                'dibatalkan' => 'Dibatalkan',
                default => 'Unknown'
            };

            // Calculate progress using helper
            $progress = $this->calculateProgress($session);
            $session->progress_percentage = $progress['percentage'];
            $session->remaining_time = $progress['remaining_time'];

            return $session;
        });

        // Get rooms for filter dropdown
        $rooms = Ruangan::where('status', 'aktif')->orderBy('nama_ruangan')->get();

        // Handle AJAX requests
        if ($request->ajax()) {
            return response()->json([
                'stats' => $stats,
                'sessions' => $activeSessions->map(function ($session) {
                    return [
                        'id' => $session->id,
                        'total_students' => $session->sesiRuanganSiswa->count(),
                        'active_students' => $session->sesiRuanganSiswa->where('status_kehadiran', 'hadir')->count(),
                        'issues_count' => 0, // Implement as needed
                        'status' => $session->status,
                        'progress_percentage' => $session->progress_percentage,
                        'remaining_time' => $session->remaining_time,
                    ];
                }),
            ]);
        }

        // Ensure all session objects have proper string values for blade template
        $activeSessions = $activeSessions->map(function ($session) {
            // Convert any array properties to proper format
            if (is_array($session->sesiRuanganSiswa)) {
                $session->sesiRuanganSiswa = collect($session->sesiRuanganSiswa);
            }

            // Ensure status_kehadiran is properly set for each siswa session
            $session->sesiRuanganSiswa->transform(function ($siswaSession) {
                if (!isset($siswaSession->status_kehadiran) || is_null($siswaSession->status_kehadiran)) {
                    $siswaSession->status_kehadiran = 'tidak_hadir';
                }
                if (!isset($siswaSession->status) || is_null($siswaSession->status)) {
                    $siswaSession->status = $siswaSession->status_kehadiran ?? 'tidak_hadir';
                }
                return $siswaSession;
            });

            return $session;
        });

        return view('features.koordinator.monitoring.index', compact(
            'sessions',
            'stats',
            'availableRuangan',
            'activeSessions',
            'rooms',
            'selectedDate',
            'selectedStatus',
            'selectedRuangan'
        ));
    }

    private function calculateProgress($session): array
    {
        $progress = [
            'percentage' => 0,
            'remaining_time' => '',
        ];

        $jadwal = $session->jadwalUjians->first();
        if (!$jadwal) {
            return $progress;
        }

        $startTime = Carbon::parse($jadwal->tanggal->format('Y-m-d') . ' ' . $session->waktu_mulai);
        $endTime   = Carbon::parse($jadwal->tanggal->format('Y-m-d') . ' ' . $session->waktu_selesai);
        $now       = Carbon::now();

        if ($now->lt($startTime)) {
            // Belum mulai
            $progress['percentage'] = 0;
            $progress['remaining_time'] = 'Belum mulai';
        } elseif ($now->between($startTime, $endTime)) {
            // Sedang berlangsung
            $totalDuration   = max(1, $endTime->diffInMinutes($startTime)); // hindari div 0
            $elapsedDuration = $now->diffInMinutes($startTime);

            $progress['percentage'] = min(100, round(($elapsedDuration / $totalDuration) * 100));
            $progress['remaining_time'] = $endTime->diffForHumans($now, true) . ' tersisa';
        } else {
            // Sudah selesai
            $progress['percentage'] = 100;
            $progress['remaining_time'] = 'Selesai';
        }

        return $progress;
    }

    /**
     * Send message to supervisor - Fixed route method name
     */
    public function sendMessage(Request $request)
    {
        $request->validate([
            'session_id' => 'required|exists:sesi_ruangan,id',
            'type' => 'required|in:info,warning,urgent',
            'message' => 'required|string|max:500'
        ]);

        try {
            // Here you would implement the messaging logic
            // For now, just return success

            return response()->json([
                'success' => true,
                'message' => 'Pesan berhasil dikirim ke pengawas'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Gagal mengirim pesan: ' . $e->getMessage()
            ], 500);
        }
    }

    /**
     * Export monitoring report
     */
    public function export(Request $request)
    {
        $date = $request->get('date', Carbon::today()->format('Y-m-d'));
        $sessions = SesiRuangan::with(['ruangan', 'jadwalUjians'])
            ->whereHas('jadwalUjians', function ($q) use ($date) {
                $q->whereDate('tanggal', $date);
            })
            ->get();

        $csvData = [];
        foreach ($sessions as $session) {
            $jadwal = $session->jadwalUjians->first();
            $progress = $this->calculateProgress($session);

            $csvData[] = [
                'Tanggal'        => $jadwal?->tanggal->format('d/m/Y'),
                'Sesi'           => $session->nama_sesi,
                'Ruangan'        => $session->ruangan->nama_ruangan,
                'Waktu Mulai'    => $session->waktu_mulai,
                'Waktu Selesai'  => $session->waktu_selesai,
                'Status'         => $session->status,
                'Progress'       => $progress['percentage'] . '%',
                'Sisa Waktu'     => $progress['remaining_time'],
            ];
        }

        return response()->streamDownload(function () use ($csvData) {
            $handle = fopen('php://output', 'w');
            if (!empty($csvData)) {
                fputcsv($handle, array_keys($csvData[0]));
                foreach ($csvData as $row) {
                    fputcsv($handle, $row);
                }
            }
            fclose($handle);
        }, "monitoring_export_{$date}.csv");
    }

    private function getMonitoringStats($date)
    {
        $sessionsTodayQuery = SesiRuangan::whereHas('jadwalUjians', function ($q) use ($date) {
            $q->whereDate('tanggal', $date);
        });

        $totalSessions = (clone $sessionsTodayQuery)->count();
        $belumMulai    = (clone $sessionsTodayQuery)->where('status', 'belum_mulai')->count();
        $berlangsung   = (clone $sessionsTodayQuery)->where('status', 'berlangsung')->count();
        $selesai       = (clone $sessionsTodayQuery)->where('status', 'selesai')->count();
        $dibatalkan    = (clone $sessionsTodayQuery)->where('status', 'dibatalkan')->count();

        $activeStudents = SesiRuanganSiswa::where('status_kehadiran', 'hadir')
            ->whereHas('sesiRuangan', function ($query) use ($date) {
                $query->where('status', 'berlangsung')
                    ->whereHas('jadwalUjians', function ($q) use ($date) {
                        $q->whereDate('tanggal', $date);
                    });
            })->count();

        $issues = 0;

        $onlineProctors = DB::table('jadwal_ujian_sesi_ruangan')
            ->join('sesi_ruangan', 'jadwal_ujian_sesi_ruangan.sesi_ruangan_id', '=', 'sesi_ruangan.id')
            ->join('jadwal_ujian', 'jadwal_ujian_sesi_ruangan.jadwal_ujian_id', '=', 'jadwal_ujian.id')
            ->whereDate('jadwal_ujian.tanggal', $date)
            ->where('sesi_ruangan.status', 'berlangsung')
            ->whereNotNull('jadwal_ujian_sesi_ruangan.pengawas_id')
            ->distinct('jadwal_ujian_sesi_ruangan.pengawas_id')
            ->count();

        return [
            'active_sessions'   => $berlangsung,
            'active_students'   => $activeStudents,
            'issues'            => $issues,
            'online_proctors'   => $onlineProctors,
            'total_sessions'    => $totalSessions,
            'belum_mulai'       => $belumMulai,
            'berlangsung'       => $berlangsung,
            'selesai'           => $selesai,
            'dibatalkan'        => $dibatalkan,
            'total_students'    => SesiRuanganSiswa::whereHas('sesiRuangan.jadwalUjians', function ($query) use ($date) {
                $query->whereDate('tanggal', $date);
            })->count(),
            'students_present'  => SesiRuanganSiswa::where('status_kehadiran', 'hadir')
                ->whereHas('sesiRuangan.jadwalUjians', function ($query) use ($date) {
                    $query->whereDate('tanggal', $date);
                })->count(),
            'unassigned_sessions' => DB::table('sesi_ruangan')
                ->join('jadwal_ujian_sesi_ruangan', 'sesi_ruangan.id', '=', 'jadwal_ujian_sesi_ruangan.sesi_ruangan_id')
                ->join('jadwal_ujian', 'jadwal_ujian_sesi_ruangan.jadwal_ujian_id', '=', 'jadwal_ujian.id')
                ->whereDate('jadwal_ujian.tanggal', $date)
                ->whereNull('jadwal_ujian_sesi_ruangan.pengawas_id')
                ->count(),
            'active_pengawas' => $onlineProctors,
        ];
    }

    // Keep other methods as they were...
    public function getSessionData(SesiRuangan $sesi)
    {
        $sesi->load(['ruangan', 'sesiRuanganSiswa.siswa', 'beritaAcaraUjian', 'jadwalUjians']);

        $studentStats = [
            'total' => $sesi->sesiRuanganSiswa->count(),
            'hadir' => $sesi->sesiRuanganSiswa->where('status_kehadiran', 'hadir')->count(),
            'tidak_hadir' => $sesi->sesiRuanganSiswa->where('status_kehadiran', 'tidak_hadir')->count(),
            'logout' => 0, // Logout functionality removed from current design
        ];

        $attendanceRate = $studentStats['total'] > 0
            ? round(($studentStats['hadir'] / $studentStats['total']) * 100, 1)
            : 0;

        // progress & remaining time pakai helper
        $progress = $this->calculateProgress($sesi);

        return response()->json([
            'session' => [
                'id' => $sesi->id,
                'nama_sesi' => $sesi->nama_sesi,
                'kode_sesi' => $sesi->kode_sesi,
                'status' => $sesi->status,
                'tanggal' => optional($sesi->jadwalUjians->first())->tanggal?->format('d/m/Y'),
                'waktu_mulai' => $sesi->waktu_mulai,
                'waktu_selesai' => $sesi->waktu_selesai,
                'token_ujian' => $sesi->token_ujian,
                'token_expired_at' => $sesi->token_expired_at?->format('Y-m-d H:i:s'),
                'progress_percentage' => $progress['percentage'],
                'remaining_time' => $progress['remaining_time'],
            ],
            'ruangan' => [
                'nama' => $sesi->ruangan->nama_ruangan,
                'kode' => $sesi->ruangan->kode_ruangan,
                'kapasitas' => $sesi->ruangan->kapasitas,
                'lokasi' => $sesi->ruangan->lokasi,
            ],
            'pengawas' => null, // Pengawas info now handled differently through pivot table
            'students' => $studentStats,
            'attendance_rate' => $attendanceRate,
            'has_berita_acara' => (bool) $sesi->beritaAcaraUjian,
            'berita_acara_status' => $sesi->beritaAcaraUjian?->is_final ? 'finalized' : 'draft',
        ]);
    }

    public function getLiveUpdates()
    {
        $ongoingSessions = SesiRuangan::where('status', 'berlangsung')
            ->with(['ruangan', 'sesiRuanganSiswa', 'jadwalUjians'])
            ->get()
            ->map(function ($sesi) {
                $studentStats = [
                    'total' => $sesi->sesiRuanganSiswa->count(),
                    'hadir' => $sesi->sesiRuanganSiswa->where('status_kehadiran', 'hadir')->count(),
                    'tidak_hadir' => $sesi->sesiRuanganSiswa->where('status_kehadiran', 'tidak_hadir')->count(),
                    'logout' => $sesi->sesiRuanganSiswa->where('status_kehadiran', 'logout')->count(),
                ];

                // Ambil progress pakai helper
                $progress = $this->calculateProgress($sesi);

                // Ambil pengawas dari pivot table untuk jadwal pertama
                $pengawasName = 'Belum ditugaskan';
                $firstJadwal = $sesi->jadwalUjians->first();
                if ($firstJadwal) {
                    $pengawas = $sesi->getPengawasForJadwal($firstJadwal->id);
                    if ($pengawas) {
                        $pengawasName = $pengawas->nama;
                    }
                }

                return [
                    'id' => $sesi->id,
                    'nama_sesi' => $sesi->nama_sesi,
                    'ruangan' => $sesi->ruangan->nama_ruangan,
                    'pengawas' => $pengawasName,
                    'students' => $studentStats,
                    'attendance_rate' => $studentStats['total'] > 0
                        ? round(($studentStats['hadir'] / $studentStats['total']) * 100, 1)
                        : 0,
                    'progress_percentage' => $progress['percentage'],
                    'remaining_time' => $progress['remaining_time'],
                ];
            });

        return response()->json([
            'timestamp' => now()->format('Y-m-d H:i:s'),
            'ongoing_sessions' => $ongoingSessions,
            'summary' => [
                'total_ongoing' => $ongoingSessions->count(),
                'total_students' => $ongoingSessions->sum('students.total'),
                'total_present' => $ongoingSessions->sum('students.hadir'),
            ]
        ]);
    }

    public function updateSessionStatus(SesiRuangan $sesi, Request $request)
    {
        $status = $request->input('status');
        $sesi->update(['status' => $status]);

        // Jika status manual diset "selesai", paksa progress = 100%
        $progress = $this->calculateProgress($sesi);
        if ($status === 'selesai') {
            $progress['percentage'] = 100;
            $progress['remaining_time'] = 'Selesai';
        }

        return response()->json([
            'success' => true,
            'status' => $sesi->status,
            'progress' => $progress,
        ]);
    }

    public function generateSessionToken(SesiRuangan $sesi)
    {
        try {
            $token = $sesi->generateToken();

            return response()->json([
                'success' => true,
                'message' => 'Token berhasil dibuat',
                'token' => $token,
                'expired_at' => $sesi->token_expired_at->format('Y-m-d H:i:s')
            ]);
        } catch (\Exception $e) {
            Log::error('Error generating session token', [
                'session_id' => $sesi->id,
                'error' => $e->getMessage()
            ]);

            return response()->json([
                'success' => false,
                'message' => 'Gagal membuat token: ' . $e->getMessage()
            ], 500);
        }
    }

    public function show(SesiRuangan $sesi)
    {
        $sesi->load(['ruangan', 'sesiRuanganSiswa.siswa', 'beritaAcaraUjian', 'jadwalUjians']);

        return view('features.koordinator.monitoring.show', compact('sesi'));
    }

    public function allowReentry(SesiRuangan $sesi, $siswaId)
    {
        $sesi->sesiRuanganSiswa()
            ->where('siswa_id', $siswaId)
            ->update(['status_kehadiran' => 'hadir']);

        return response()->json([
            'success' => true,
            'message' => 'Siswa diperbolehkan masuk kembali',
        ]);
    }

    public function studentDetail(SesiRuangan $sesi, $siswaId)
    {
        $student = $sesi->sesiRuanganSiswa()
            ->with('siswa')
            ->where('siswa_id', $siswaId)
            ->firstOrFail();

        return response()->json([
            'id' => $student->siswa->id,
            'nama' => $student->siswa->nama,
            'nis' => $student->siswa->nis,
            'status_kehadiran' => $student->status_kehadiran,
            'login_at' => $student->login_at,
            'logout_at' => $student->logout_at,
        ]);
    }
}
